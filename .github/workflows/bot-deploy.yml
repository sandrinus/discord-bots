name: Quick Redeploy - Casino Bot Only

on:
  push:
    branches:
      - main
    paths:
      - 'casino/*.py'
      - 'casino/casino-requirements.txt'
  workflow_dispatch:

jobs:
  redeploy-bot:
    name: Rebuild & Restart Casino Bot Only
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Start SSH Agent & Add Key
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Setup SSH multiplexing
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        echo "Host ${{ secrets.SSH_HOST }}
          ControlMaster auto
          ControlPath ~/.ssh/cm-%r@%h:%p
          ControlPersist 600" >> ~/.ssh/config

    - name: Navigate to project & fetch latest changes
      env:
        SSH_USER: ${{ secrets.SSH_USER }}
        SSH_HOST: ${{ secrets.SSH_HOST }}
      run: |
        ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST \
          "cd /home/$SSH_USER/discord-bots/casino && \
           git fetch --all && \
           git reset --hard origin/main"

    - name: Stop old containers & clean up images
      env:
        SSH_USER: ${{ secrets.SSH_USER }}
        SSH_HOST: ${{ secrets.SSH_HOST }}
      run: |
        ssh $SSH_USER@$SSH_HOST \
          "cd /home/$SSH_USER/discord-bots/casino && \
           docker-compose -f docker_conf/casino-postgres-docker-compose.yml rm -sf casino-bot || true && \
           docker image prune -f"

    - name: Write .env file for Docker
      env:
        SSH_USER: ${{ secrets.SSH_USER }}
        SSH_HOST: ${{ secrets.SSH_HOST }}
        CASINO_TOKEN: ${{ secrets.CASINO_TOKEN }}
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWD: ${{ secrets.POSTGRES_PASSWD }}
      run: |
        ssh $SSH_USER@$SSH_HOST \
          "cd /home/$SSH_USER/discord-bots/casino && \
           echo 'CASINO_TOKEN=${CASINO_TOKEN}' > .env && \
           echo 'POSTGRES_USER=${POSTGRES_USER}' >> .env && \
           echo 'POSTGRES_PASSWD=${POSTGRES_PASSWD}' >> .env"

    - name: Build & start casino bot
      env:
        SSH_USER: ${{ secrets.SSH_USER }}
        SSH_HOST: ${{ secrets.SSH_HOST }}
      run: |
        ssh $SSH_USER@$SSH_HOST \
          "cd /home/$SSH_USER/discord-bots/casino && \
           docker-compose -f docker_conf/casino-postgres-docker-compose.yml \
           --project-directory . up --build -d casino-bot"

    - name: Verify bot status & send alert if failed
      env:
        SSH_USER: ${{ secrets.SSH_USER }}
        SSH_HOST: ${{ secrets.SSH_HOST }}
        DISCORD_WEBHOOK_ALERT: ${{ secrets.DISCORD_WEBHOOK_ALERT }}
        MY_DISCORD_UID: ${{ secrets.MY_DISCORD_UID }}
      run: |
        ssh $SSH_USER@$SSH_HOST \
          "if ! test \"\$(docker inspect --format='{{.State.Status}}' casino-bot)\" = \"running\"; then
             curl -X POST -H 'Content-Type: application/json' \
               -d '{\"content\": \"ðŸš¨ <@${MY_DISCORD_UID}> Casino Bot failed to restart!\"}' \
               ${DISCORD_WEBHOOK_ALERT}
             exit 1
           fi"
